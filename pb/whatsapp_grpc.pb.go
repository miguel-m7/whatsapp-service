// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: whatsapp.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WhatsAppService_StartSession_FullMethodName       = "/whatsapp.WhatsAppService/StartSession"
	WhatsAppService_CheckSessionStatus_FullMethodName = "/whatsapp.WhatsAppService/CheckSessionStatus"
	WhatsAppService_SendMessage_FullMethodName        = "/whatsapp.WhatsAppService/SendMessage"
)

// WhatsAppServiceClient is the client API for WhatsAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for WhatsApp session management
type WhatsAppServiceClient interface {
	// Start a new WhatsApp session and get QR code
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	// Check session status by ID
	CheckSessionStatus(ctx context.Context, in *SessionStatusRequest, opts ...grpc.CallOption) (*SessionStatusResponse, error)
	// Send message and get status
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type whatsAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhatsAppServiceClient(cc grpc.ClientConnInterface) WhatsAppServiceClient {
	return &whatsAppServiceClient{cc}
}

func (c *whatsAppServiceClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, WhatsAppService_StartSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) CheckSessionStatus(ctx context.Context, in *SessionStatusRequest, opts ...grpc.CallOption) (*SessionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionStatusResponse)
	err := c.cc.Invoke(ctx, WhatsAppService_CheckSessionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, WhatsAppService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhatsAppServiceServer is the server API for WhatsAppService service.
// All implementations must embed UnimplementedWhatsAppServiceServer
// for forward compatibility.
//
// Service definition for WhatsApp session management
type WhatsAppServiceServer interface {
	// Start a new WhatsApp session and get QR code
	StartSession(context.Context, *StartSessionRequest) (*SessionResponse, error)
	// Check session status by ID
	CheckSessionStatus(context.Context, *SessionStatusRequest) (*SessionStatusResponse, error)
	// Send message and get status
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedWhatsAppServiceServer()
}

// UnimplementedWhatsAppServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWhatsAppServiceServer struct{}

func (UnimplementedWhatsAppServiceServer) StartSession(context.Context, *StartSessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedWhatsAppServiceServer) CheckSessionStatus(context.Context, *SessionStatusRequest) (*SessionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSessionStatus not implemented")
}
func (UnimplementedWhatsAppServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedWhatsAppServiceServer) mustEmbedUnimplementedWhatsAppServiceServer() {}
func (UnimplementedWhatsAppServiceServer) testEmbeddedByValue()                         {}

// UnsafeWhatsAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhatsAppServiceServer will
// result in compilation errors.
type UnsafeWhatsAppServiceServer interface {
	mustEmbedUnimplementedWhatsAppServiceServer()
}

func RegisterWhatsAppServiceServer(s grpc.ServiceRegistrar, srv WhatsAppServiceServer) {
	// If the following call pancis, it indicates UnimplementedWhatsAppServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WhatsAppService_ServiceDesc, srv)
}

func _WhatsAppService_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsAppService_StartSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_CheckSessionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).CheckSessionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsAppService_CheckSessionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).CheckSessionStatus(ctx, req.(*SessionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsAppService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WhatsAppService_ServiceDesc is the grpc.ServiceDesc for WhatsAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhatsAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whatsapp.WhatsAppService",
	HandlerType: (*WhatsAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSession",
			Handler:    _WhatsAppService_StartSession_Handler,
		},
		{
			MethodName: "CheckSessionStatus",
			Handler:    _WhatsAppService_CheckSessionStatus_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _WhatsAppService_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whatsapp.proto",
}
